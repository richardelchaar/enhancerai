## Model name
LightGBM Regressor

## Example Python code
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
import lightgbm as lgb

# Generate synthetic data for regression
X = pd.DataFrame(np.random.rand(1000, 10), columns=[f'feature_{i}' for i in range(10)])
y = pd.Series(np.random.rand(1000) * 100 + 5 * X.sum(axis=1))

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize LightGBM Regressor
# 'objective': 'regression' and 'metric': 'rmse' are suitable for this task.
# 'n_estimators' can be tuned for better performance.
model_lgbm = lgb.LGBMRegressor(objective='regression', metric='rmse', n_estimators=100, random_state=42)

# Train the model
model_lgbm.fit(X_train, y_train)

# Make predictions on the test set
y_pred_lgbm = model_lgbm.predict(X_test)

# Calculate RMSE
rmse_lgbm = np.sqrt(mean_squared_error(y_test, y_pred_lgbm))
print(f"LightGBM RMSE: {rmse_lgbm:.4f}")