## Model name
TabNet (Attentive Interpretable Tabular Learning)

## Example Python code
import numpy as np
import torch
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from sklearn.datasets import make_regression
from pytorch_tabnet.tab_model import TabNetRegressor

# 1. Generate synthetic data (replace with your actual data)
X, y = make_regression(n_samples=1000, n_features=10, random_state=42, noise=0.1)

# 2. Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y.reshape(-1, 1), test_size=0.2, random_state=42)

# 3. Initialize and train the TabNet Regressor
#    n_d and n_a are dimensions of the decision prediction and attention layers
#    optimizer_fn can be torch.optim.Adam, eval_metric=['rmse'] for early stopping
model = TabNetRegressor(optimizer_fn=torch.optim.Adam,
                        optimizer_params=dict(lr=2e-2),
                        scheduler_params={"step_size":50, "gamma":0.9},
                        scheduler_fn=torch.optim.lr_scheduler.StepLR,
                        mask_type='entmax', # or 'sparsemax'
                        verbose=0 # Suppress verbose output
                       )

model.fit(X_train=X_train, y_train=y_train,
          eval_set=[(X_test, y_test)],
          eval_metric=['rmse'], # Monitor RMSE on validation set
          max_epochs=100, patience=20, # Early stopping if no improvement
          batch_size=1024, virtual_batch_size=128
         )

# 4. Make predictions on the test set
y_pred = model.predict(X_test)

# 5. Evaluate the model using RMSE
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
print(f"TabNet RMSE: {rmse:.4f}")