## Model name
TabNet

## Example Python code
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from pytorch_tabnet.tab_model import TabNetRegressor
import torch

# Ensure reproducibility
torch.manual_seed(42)
np.random.seed(42)

# --- Placeholder for data (replace with your actual data) ---
# TabNet works well with NumPy arrays or Pandas DataFrames
X_train_np = np.random.rand(100, 10).astype(np.float32)
y_train_np = np.random.rand(100).astype(np.float32).reshape(-1, 1) # Target needs to be 2D for TabNet
X_test_np = np.random.rand(20, 10).astype(np.float32)
y_test_np = np.random.rand(20).astype(np.float32).reshape(-1, 1)
# ----------------------------------------------------------

# Initialize TabNet Regressor
# n_d, n_a: dimensions of the decision prediction layer and attention embedding for each mask
# n_steps: number of successive attention/decision steps
# optimizer_fn: PyTorch optimizer (e.g., torch.optim.Adam)
# scheduler_fn: Learning rate scheduler
# verbose=0 to suppress training output
model = TabNetRegressor(random_state=42, verbose=0,
                        optimizer_fn=torch.optim.Adam,
                        optimizer_params=dict(lr=2e-2),
                        scheduler_params={"step_size":50, "gamma":0.9},
                        scheduler_fn=torch.optim.lr_scheduler.StepLR)

# Train the model
# max_epochs: number of training epochs
# patience: number of epochs without improvement to wait before early stopping
# plot_history=False to not show training plots
model.fit(X_train=X_train_np, y_train=y_train_np,
          eval_set=[(X_test_np, y_test_np)],
          eval_metric=['rmse'],
          max_epochs=100, patience=20,
          batch_size=1024, virtual_batch_size=128)

# Make predictions on the test set
y_pred = model.predict(X_test_np)

# Evaluate RMSE
rmse = np.sqrt(mean_squared_error(y_test_np, y_pred))
print(f"TabNet RMSE: {rmse}")