## Model name
LightGBM Regressor

## Example Python code
import lightgbm as lgb
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
import numpy as np

# 1. Generate synthetic data (replace with your actual data loading)
X = np.random.rand(1000, 10) # 1000 samples, 10 features
y = np.random.rand(1000) * 100 + X[:, 0] * 50 # Target variable with some dependency

# 2. Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 3. Initialize and train the LightGBM Regressor
# Common parameters for regression: objective='regression', metric='rmse'
model = lgb.LGBMRegressor(objective='regression', metric='rmse', n_estimators=100, learning_rate=0.1, num_leaves=31, random_state=42)
model.fit(X_train, y_train)

# 4. Make predictions on the test set
y_pred = model.predict(X_test)

# 5. Evaluate the model using Root Mean Squared Error (RMSE)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
print(f"LightGBM RMSE: {rmse:.4f}")