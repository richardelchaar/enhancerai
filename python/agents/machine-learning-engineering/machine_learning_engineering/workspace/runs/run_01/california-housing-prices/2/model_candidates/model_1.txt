## Model name
XGBoost (Extreme Gradient Boosting)

## Example Python code
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn.metrics import mean_squared_error

# 1. Generate synthetic data (replace with your actual data loading)
# For demonstration, let's create a simple dataset
np.random.seed(42)
X = pd.DataFrame(np.random.rand(100, 5), columns=[f'feature_{i}' for i in range(5)])
y = 2 * X['feature_0'] + 3 * X['feature_1'] - 0.5 * X['feature_2'] + np.random.randn(100) * 0.5
y = pd.Series(y, name='median_house_value') # Target variable

# 2. Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 3. Initialize the XGBoost Regressor model
# objective='reg:squarederror' is the standard objective for regression with squared loss, 
# optimizing for MSE, which directly relates to RMSE [1, 2, 8, 13, 21].
model_xgboost = XGBRegressor(objective='reg:squarederror', n_estimators=100, learning_rate=0.1, random_state=42)

# 4. Train the model
model_xgboost.fit(X_train, y_train)

# 5. Make predictions on the test set
y_pred_xgboost = model_xgboost.predict(X_test)

# 6. Evaluate the model using Root Mean Squared Error (RMSE)
rmse_xgboost = np.sqrt(mean_squared_error(y_test, y_pred_xgboost))
print(f"XGBoost RMSE: {rmse_xgboost:.4f}")

# You can further tune hyperparameters like n_estimators, max_depth, learning_rate, 
# min_child_weight, subsample, and colsample_bytree for better performance and to prevent overfitting [9, 17, 20, 22, 24].
