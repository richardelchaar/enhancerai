```json
[
  {
    "model_name": "LightGBM Regressor",
    "example_code": "import lightgbm as lgb\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.datasets import make_regression\nfrom sklearn.metrics import mean_squared_error\nimport numpy as np\n\n# Generate synthetic data for demonstration\nX, y = make_regression(n_samples=1000, n_features=10, n_informative=5, random_state=42)\n\n# Split data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Initialize the LightGBM Regressor model\n# Objective 'regression_l1' for MAE, 'regression_l2' or 'rmse' for MSE/RMSE\n# The default 'objective' for LGBMRegressor is 'regression', which is L2 loss (MSE)\nmodel = lgb.LGBMRegressor(objective='regression_l2', metric='rmse', random_state=42)\n\n# Train the model\nmodel.fit(X_train, y_train)\n\n# Make predictions on the test set\ny_pred = model.predict(X_test)\n\n# Evaluate the model (optional, but good for understanding performance)\nrmse = np.sqrt(mean_squared_error(y_test, y_pred))\nprint(f\"LightGBM RMSE: {rmse:.4f}\")\n"
  },
  {
    "model_name": "XGBoost Regressor",
    "example_code": "import xgboost as xgb\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.datasets import make_regression\nfrom sklearn.metrics import mean_squared_error\nimport numpy as np\n\n# Generate synthetic data for demonstration\nX, y = make_regression(n_samples=1000, n_features=10, n_informative=5, random_state=42)\n\n# Split data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Initialize the XGBoost Regressor model\n# 'objective' 'reg:squarederror' is for regression with squared loss, which is suitable for RMSE.\nmodel = xgb.XGBRegressor(objective='reg:squarederror', eval_metric='rmse', random_state=42)\n\n# Train the model\nmodel.fit(X_train, y_train)\n\n# Make predictions on the test set\ny_pred = model.predict(X_test)\n\n# Evaluate the model (optional, but good for understanding performance)\nrmse = np.sqrt(mean_squared_error(y_test, y_pred))\nprint(f\"XGBoost RMSE: {rmse:.4f}\")\n"
  }
]
```