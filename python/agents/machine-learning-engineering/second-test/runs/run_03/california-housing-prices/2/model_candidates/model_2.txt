## Model name
LightGBM (Light Gradient Boosting Machine)

## Example Python code
import lightgbm as lgb
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
import numpy as np

# 1. Generate synthetic data (replace with your actual data)
np.random.seed(42)
X = np.random.rand(1000, 10) * 100  # 1000 samples, 10 features
y = 2 * X[:, 0] + 3 * X[:, 1] - 0.5 * X[:, 2] + np.random.randn(1000) * 5 + 50 # Example target dependent on features

# 2. Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 3. Initialize and train the LightGBM Regressor model
# Objective 'regression' is standard for regression
# 'n_estimators' is the number of boosting rounds (trees)
# 'learning_rate' controls the step size shrinkage
model_lgb = lgb.LGBMRegressor(objective='regression', n_estimators=100, learning_rate=0.1, random_state=42)
model_lgb.fit(X_train, y_train)

# 4. Make predictions
y_pred_lgb = model_lgb.predict(X_test)

# 5. Calculate Root Mean Squared Error (RMSE)
rmse_lgb = np.sqrt(mean_squared_error(y_test, y_pred_lgb))
print(f"LightGBM RMSE: {rmse_lgb:.4f}")