## Model name
LightGBM

## Example Python code
import lightgbm as lgb
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from sklearn.datasets import make_regression
import numpy as np

# Generate synthetic data
X, y = make_regression(n_samples=1000, n_features=10, n_informative=5, random_state=42)

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize the LightGBM Regressor
# objective='regression' is default for LGBMRegressor
# metric='rmse' can be specified but LightGBM often infers based on objective
model_lgbm = lgb.LGBMRegressor(random_state=42, n_estimators=100)

# Train the model
model_lgbm.fit(X_train, y_train)

# Make predictions on the test set
y_pred_lgbm = model_lgbm.predict(X_test)

# Evaluate the model using Root Mean Squared Error (RMSE)
rmse_lgbm = np.sqrt(mean_squared_error(y_test, y_pred_lgbm))
print(f"LightGBM RMSE: {rmse_lgbm:.4f}")