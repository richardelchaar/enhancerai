## Model name
XGBoost Regressor

## Example Python code
import xgboost as xgb
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
import numpy as np
import pandas as pd

# Create a synthetic dataset for demonstration
np.random.seed(42)
X = pd.DataFrame(np.random.rand(100, 5), columns=[f'feature_{i}' for i in range(5)])
y = pd.Series(5 * X['feature_0'] + 2 * X['feature_1'] - 3 * X['feature_2'] + np.random.randn(100) * 0.5)

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and train the XGBoost Regressor model
# objective='reg:squarederror' is the default for regression tasks
# n_estimators can be tuned, a small number is used for a simple example
model = xgb.XGBRegressor(objective='reg:squarederror', n_estimators=100, learning_rate=0.1, random_state=42)
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model using RMSE
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
print(f"XGBoost Regressor RMSE: {rmse:.4f}")