## Model name
LightGBM (Light Gradient Boosting Machine)

## Example Python code
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
import lightgbm as lgb
from sklearn.metrics import mean_squared_error

# Simulate a tabular dataset (replace with your actual data loading)
np.random.seed(42)
X = pd.DataFrame(np.random.rand(1000, 10), columns=[f'feature_{i}' for i in range(10)])
y = 2 * X['feature_0'] + 3 * X['feature_1'] - 1.5 * X['feature_2'] + np.random.randn(1000) * 0.5

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and train the LightGBM Regressor model
# objective='regression' specifies regression task
# n_estimators: number of boosting rounds/trees
# learning_rate: step size shrinkage to prevent overfitting
model_lightgbm = lgb.LGBMRegressor(objective='regression', n_estimators=100, learning_rate=0.1, random_state=42)
model_lightgbm.fit(X_train, y_train)

# Make predictions on the test set
y_pred_lightgbm = model_lightgbm.predict(X_test)

# Calculate RMSE
rmse_lightgbm = np.sqrt(mean_squared_error(y_test, y_pred_lightgbm))
print(f"LightGBM RMSE: {rmse_lightgbm:.4f}")

# Example of making a single prediction (if needed)
# new_data = pd.DataFrame(np.random.rand(1, 10), columns=[f'feature_{i}' for i in range(10)])
# single_prediction = model_lightgbm.predict(new_data)
# print(f"Single prediction with LightGBM: {single_prediction[0]:.4f}")